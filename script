import pandas as pd
import requests, re, os, time
from time import sleep
from bs4 import BeautifulSoup

chrome_path = """" # PATH TO chromedriver.exe

from selenium.webdriver import Chrome
from selenium.common.exceptions import StaleElementReferenceException, NoSuchElementException, NoSuchWindowException
browser = Chrome(chrome_path)

# Сбор ссылок на туроператоров, которые делают туры заграницу

urls = []

for i in range(58):
    for post in browser.find_elements_by_xpath("//div[@class = 'search-result_item']"):
        urls.append(post.find_element_by_tag_name('a').get_attribute('href'))
    browser.find_element_by_xpath("//a[@class = 'last-page pull-right']").click()
    time.sleep(5)
    
with open('russiatourism_urls', 'w') as f:
    for item in urls:
        f.write("%s\n" % item)

# Функции: div_clear_1_level и div_clear_2_level - чтобы искать конкретное указание на первой или второй строчке в карточке
# card - собирает карточку в словарь

def div_clear_1_level(inner_regis, search_term):
    for div in inner_regis:
        if search_term in div.text:
            return div.find_all('div')[1].text.strip()
        
def div_clear_2_level(inner_regis, search_term):
    for i, div in enumerate(inner_regis):
        if search_term in div.text:
            return inner_regis[i+1].find_all(class_ = "b_inner__regis_item")[1].text.strip()

def card(url):
    page = BeautifulSoup(requests.get(url).text, 'lxml')
    name = page.find('h1', class_ = 'heading').text.strip()
    inner_regis = page.find('div', class_ = 'b_inner__regis').find_all('div')
    
    register = div_clear_1_level(inner_regis, 'РТО ')
    address = div_clear_1_level(inner_regis, 'Адрес, ')
    inn = div_clear_1_level(inner_regis, 'ИНН')
    website = div_clear_1_level(inner_regis, 'сайт')
    
    last_year_tourists = div_clear_2_level(inner_regis, 'туристов в сфере выездного')
    last_year_revenue = div_clear_2_level(inner_regis, "цена туристского продукта")
    annual_insurance = div_clear_2_level(inner_regis, "взноса, перечисленного туроператором в фонд ")
    personal_liability = div_clear_2_level(inner_regis, "фонда персональной ответственности")
    try:
        reserve_fund = float(div_clear_2_level(inner_regis, "взноса в резервный фонд"))
    except ValueError:
        reserve_fund = 0
    return {'url' : url, 'name' : name, 'register' : register, 'inn' : inn, "address" : address,
            'website' : website, 'last_year_tourists' : int(last_year_tourists), 
            'last_year_revenue' : float(last_year_revenue), 'annual_insurance' : float(annual_insurance),
            "personal_liability" : float(personal_liability), "reserve_fund" : reserve_fund}
            
# сбор всех данных            
result = []
for url in urls:
    result.append(card(url))
df = pd.DataFrame(result)
df['avg_tour_price'] = df.last_year_revenue / df.last_year_tourists
df.sort_values('avg_tour_price', ascending=False).to_csv('Реестр операторов выездного туризма на 21 марта 2019.csv', index=False)
